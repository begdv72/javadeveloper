import java.util.Locale;
import java.util.Scanner;

public class TestScanner {
    public static void main(String[] args) {
        System.out.println("Введите число:");
        int i;
        while (true) {
            if(scanner.hasNextInt()){
                i = scanner.nextInt();
                break;
            }
            else {
                scanner.nextLine();
            }
        }
        System.out.println("echo: " + i);
    }
}

import java.util.Scanner;

public class InputTwoNumbers {
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
  /*      int firstNumber = readIntNumber("Введите целое число");
        int secondNumber = readIntNumber("Введите еще одно целое число");*/
        Scanner scanner = new Scanner(System.in);
        System.out.println("Упражнение 1");
        System.out.print("Введите первое число ");
        int firstNumber = scanner.nextInt();
        System.out.print("Введите второе число ");
        int secondNumber = scanner.nextInt();
        if((firstNumber < 0 && secondNumber > 0) || (firstNumber > 0 && secondNumber < 0)) {
            System.out.printf("firstNumber * secondNumber = %d",(int)(firstNumber * secondNumber));
        }
        else if(firstNumber > secondNumber){
            System.out.printf("firstNumber - secondNumber = %d",(int)(firstNumber - secondNumber));
        }
        else if ((firstNumber < 0 && secondNumber < 0)){
            System.out.printf("firstNumber + secondNumber = %d",(int)(firstNumber + secondNumber));
        }
        else {
            System.out.printf("firstNumber % secondNumber = %d",(int)(firstNumber % secondNumber));
        }
    }

    private static int readIntNumber(String prompt) {
        System.out.println(prompt);
        int i;
        while (true) {
            if(scanner.hasNextInt()){
                i = scanner.nextInt();
                break;
            }
            else {
                scanner.nextLine();
            }
        }
        System.out.println("echo: " + i);
        return i;
    }
}

import java.util.Arrays;
import java.util.Scanner;

public class InputThreeNumbers {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Упражнение 1");
        System.out.print("Введите первое число ");
        int k = scanner.nextInt();
        System.out.print("Введите второе число ");
        int t = scanner.nextInt();
        System.out.print("Введите третье число ");
        int n = scanner.nextInt();
        int[] arr1 = new int[n];
        int[] arr2 = new int[n];
        for (int i = 0; i < n; i++) {
            arr1[i] = k * (i - t);
        }
        for (int i = 0; i < n; i++) {
            arr2[i] = k + t - i;
        }
        System.out.println(Arrays.toString(arr1));
        System.out.println(Arrays.toString(arr2));
    }
}

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Упражнение 3");
        System.out.println("Наберите сумму чисел равную 21 (или введите 0 для завершения)");

        int sum = 0;
        int userNumber = -1;

        while (sum != 21) {
            System.out.print("Введите число: ");
            userNumber = scanner.nextInt();
            if (userNumber == 0) {
                break;
            }
            if (userNumber < 0 || userNumber > 10) {
                System.out.println("Нужно ввести число от 0 до 10");
            } else {
                sum += userNumber;
            }
            System.out.println("Сумма равна " + sum);
            if (sum > 21) {
                break;
            }
        }

        if (sum == 21) {
            System.out.println("Сумма набрана");
        } else {
            System.out.println("Попробуйте выиграть в следующий раз");
        }
    }
}

import java.util.Objects;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Упражнение 4");

        String wordForGuessing = "program";
        System.out.println("Отгадайте слово из " + wordForGuessing.length() + " букв");

        // для разгадывания слова делаем такого же размера массив символов
        // и заполняем его подчеркиваниями, раз пока ни одной буквы не угаданно
        String guessedWord = "";
        for (int i = 0; i < wordForGuessing.length(); i++) {
            // складывать строки в цикле плохая идея (в Java),
            // так как нерационально расходуется память
            // нужно использовать StringBuilder, который вы изучите позже
            // а пока сделаем временный вариант
            guessedWord = guessedWord + "_";
        }

        // обнуляем счетчик попыток
        int tryCount = 0;

        // крутимся в цикле, пока массивы не совпадают, помним, что знак ! – это частичка "НЕ",
        // которая означает отрицание
        // Objects.equals() – позволяет сравнить две строчки, возвращает true, если они совпадают
        // Сравнивать строчки через двойное равенство == не стоит, про это детально вы узнаете на 7-м занятии
        while (!Objects.equals(guessedWord, wordForGuessing)) {
            tryCount = tryCount + 1;
            System.out.println("Попытка " + tryCount);
            System.out.println(guessedWord);
            System.out.println("Введите букву (или 0 для выхода)");

            String userInput = scanner.nextLine();

            // выходим из игры, если введен 0
            if (Objects.equals(userInput, "0")) {
                break;
            }

            // перебираем все буквы в слове
            for (int i = 0; i < wordForGuessing.length(); i++) {
                // проверяем, есть ли такая буква в загаданном слове
                // вырезаем из строки букву под индексом i
                // у метода substring() первый параметр – это номер буквы с которого начинаем вырезать
                // а второй параметр – номер на 1 больше, чем буква, на которой должны остановиться
                String letter = wordForGuessing.substring(i, i + 1);
                if (Objects.equals(letter, userInput)) {
                    // меняем знак _ на угаданную букву
                    // строки в Java - неизменяемые, то есть мы не можем залезть
                    // внутрь строки и поменять в ней какой-то символ
                    // поэтому приходится резать строку на части и собирать заново
                    String leftPart = "";
                    String rightPart = "";
                    // левую часть вырежем только если она есть, чтобы не получить ошибку
                    if (i > 0) {
                        leftPart = guessedWord.substring(0, i);
                    }
                    // и правую часть вырежем только если она есть, чтобы не получить ошибку
                    if (i < wordForGuessing.length() - 1) {
                        rightPart = guessedWord.substring(i + 1);
                    }
                    // склеим слово заново
                    // пока будем использовать знак +, но в будущем вы его замените
                    // на использование класса StringBuilder
                    guessedWord = leftPart + userInput + rightPart;
                }
            }
        }

        if (Objects.equals(guessedWord, wordForGuessing)) {
            System.out.println("Слово " + String.valueOf(wordForGuessing) + " отгадано за " + tryCount + " попыток");
        } else {
            System.out.println("Попробуйте еще раз");
        }
    }
}

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Упражнение 4");

        char[] wordForGuessing = {'p', 'r', 'o', 'g', 'r', 'a', 'm'};
        // или полная запись вот так:
        // char[] wordForGuessing = new char[]{'p', 'r', 'o', 'g', 'r', 'a', 'm'};
        System.out.println("Отгадайте слово из " + wordForGuessing.length + " букв");

        // для разгадывания слова делаем такого же размера массив символов
        // и заполняем его подчеркиваниями, раз пока ни одной буквы не угаданно
        char[] guessedWord = new char[wordForGuessing.length];
        for (int i = 0; i < guessedWord.length; i++) {
            guessedWord[i] = '_';
        }

        // обнуляем счетчик попыток
        int tryCount = 0;

        // крутимся в цикле, пока массивы не совпадают, помним, что знак ! – это частичка "НЕ",
        // которая означает отрицание
        // Arrays.equals() – позволяет сравнить два массива, возвращает true, если они совпадают
        while (!Arrays.equals(guessedWord, wordForGuessing)) {
            tryCount = tryCount + 1;
            System.out.println("Попытка " + tryCount);
            System.out.println(guessedWord);
            System.out.println("Введите букву (или 0 для выхода)");

            String userInput = scanner.nextLine();
            char userLetter;
            // здесь программа может сломаться, если пользователь не введет никакое число
            // а просто нажмет Enter
            userLetter = userInput.charAt(0);

            // выходим из игры, если введен 0
            if (userLetter == '0') {
                break;
            }

            // перебираем все буквы в слове
            for (int i = 0; i < wordForGuessing.length; i++) {
                // проверяем, есть ли такая буква в загаданном слове
                if (wordForGuessing[i] == userLetter) {
                    // меняем знак _ на угаданную букву
                    guessedWord[i] = userLetter;
                }
            }
        }
        
        if (Arrays.equals(guessedWord, wordForGuessing)) {
            System.out.println("Слово " + String.valueOf(wordForGuessing) + " отгадано за " + tryCount + " попыток");
        } else {
            System.out.println("Попробуйте еще раз");
        }
    }
}

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Упражнение 5");

        String wordForGuessing = "";

        int currentPlayer = 1;
        while (true) {
            System.out.println("Игрок " + currentPlayer + " введите загаданное слово");
            wordForGuessing = scanner.nextLine();

            // Метод wordForGuessing.toCharArray() можно вызвать у любой строки
            // он любую строку превратить в массив символов
            guessWord(wordForGuessing.toCharArray());

            // Если вы помните тернарный оператор из 3-го занятия,
            // то можно сделать так
            currentPlayer = (currentPlayer == 1) ? 2 : 1;
        }

    }

    private static void guessWord(char[] wordForGuessing) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Отгадайте слово из " + wordForGuessing.length + " букв");

        // для разгадывания слова делаем такого же размера массив символов
        // и заполняем его подчеркиваниями, раз пока ни одной буквы не угаданно
        char[] guessedWord = new char[wordForGuessing.length];
        for (int i = 0; i < guessedWord.length; i++) {
            guessedWord[i] = '_';
        }

        // обнуляем счетчик попыток
        int tryCount = 0;

        // крутимся в цикле, пока массивы не совпадают, помним, что знак ! – это частичка "НЕ",
        // которая означает отрицание
        // Arrays.equals() – позволяет сравнить два массива, возвращает true, если они совпадают
        while (!Arrays.equals(guessedWord, wordForGuessing)) {
            tryCount = tryCount + 1;
            System.out.println("Попытка " + tryCount);
            System.out.println(guessedWord);
            System.out.println("Введите букву (или 0 для выхода)");

            String userInput = scanner.nextLine();
            char userLetter;
            // здесь программа может сломаться, если пользователь не введет никакое число
            // а просто нажмет Enter
            userLetter = userInput.charAt(0);

            // выходим из игры, если введен 0
            if (userLetter == '0') {
                break;
            }

            // перебираем все буквы в слове
            for (int i = 0; i < wordForGuessing.length; i++) {
                // проверяем, есть ли такая буква в загаданном слове
                if (wordForGuessing[i] == userLetter) {
                    // меняем знак _ на угаданную букву
                    guessedWord[i] = userLetter;
                }
            }
        }

        if (Arrays.equals(guessedWord, wordForGuessing)) {
            System.out.println("Слово " + String.valueOf(wordForGuessing) + " отгадано за " + tryCount + " попыток");
        } else {
            System.out.println("Попробуйте еще раз");
        }
    }
}

import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Упражнение 6");

        // Символ, которым заполним пустое поле
        final char BLANK_SYMBOL = '_';
        // Определим размер таблицы, например 3 на 3
        final int ROW_SIZE = 3;
        // создадим массив символов под размер таблицы
        char[] field = new char[ROW_SIZE * ROW_SIZE];

        // Заполняем поле символом с подчеркиванием в цикле
        for (int i = 0; i < field.length; i++) {
            field[i] = BLANK_SYMBOL;
        }
        // Или можем это сделать с помощью библиотечного метода Arrays.fill();
        // которому передается массив для заполнения первым параметром и символ для заполнения вторым параметром
        Arrays.fill(field, BLANK_SYMBOL);

        while (true) {
            // Выводим поле на экран
            for (int i = 0; i < field.length; i++) {
                System.out.print(field[i] + " ");
                if ((i + 1) % ROW_SIZE == 0) {
                    System.out.println();
                }
            }

            // В userInput сохраним номер ячейки, который ввел пользователь
            int userInput = -1; // по умолчанию присвоим, например, -1
            // будем крутиться в вечном цикле, пока пользователь не введет все так, как положено
            do {
                System.out.print("Выберите номер ячейки (от 1 до " + ROW_SIZE * ROW_SIZE + ", кроме занятых) или 0 для выхода ");
                userInput = scanner.nextInt();
                // считываем перевод строчки, чтобы очистить буффер
                // иначе он из буффера прочитается при следующем вводе символа
                scanner.nextLine();
                // здесь хитрое сравнение
                // если пользователь введет 0, то мы выйдем из цикла и не будем проверять остаток условия
                // если введет меньше 1 или больше 9, то тоже выйдем из цикла
                // и не будем лезть в массив field[userInput - 1]
                // поэтому не выйдем за его пределы
            } while (!(userInput == 0 ||
                    (userInput >= 1 && userInput <= ROW_SIZE * ROW_SIZE && field[userInput - 1] == BLANK_SYMBOL)));

            // Выходим, если пользователь ввел 0
            if (userInput == 0) {
                break;
            }

            // В цикле спрашиваем до тех пор, пока пользователь не введет какую-то букву
            // Если он просто нажмет Enter попросим ввести еще раз
            // Обратите внимание, что в этом цикле мы используеум конструкцию do-while
            // Так код получается более лаконичным
            String line;
            do {
                System.out.println("Введите символ, который надо поставить в ячейку ");
                line = scanner.nextLine();
            } while (line.isEmpty());

            // Если бы мы не проверяли на пустой ввод выше в цикле, то здесь могла бы произойти ошибка
            field[userInput - 1] = line.charAt(0);
        }

    }
}

import java.util.Arrays;
import java.util.Scanner;

public class TicTacToe {
    // Символ, которым заполним пустое поле
    final static char BLANK_SYMBOL = '_';
    // Определим размер таблицы, например 3 на 3
    final static int ROW_SIZE = 3;
    // создадим массив символов под размер таблицы
    static char[] field = new char[ROW_SIZE * ROW_SIZE];
    public static void main(String[] args) {
        System.out.println("Упражнение 6");

        // Или можем это сделать с помощью библиотечного метода Arrays.fill();
        // которому передается массив для заполнения первым параметром и символ для заполнения вторым параметром
        Arrays.fill(field, BLANK_SYMBOL);
        String[] users = {"First", "Second"};

        while (true) {
            // Выводим поле на экран
            for (int u = 0; u < users.length; u++) {
                int userMove = readUserMove(users[u]);
                for (int i = 0; i < field.length; i++) {
                    System.out.print(field[i] + " ");
                    if ((i + 1) % ROW_SIZE == 0) {
                        System.out.println();
                    }
                }
                if(userMove == 0)
                    return;
            }
        }
    }
    private static int readUserMove(String user){
        Scanner scanner = new Scanner(System.in);
        System.out.println("Пользователь " + user + " - Ваш ход! ");
        // В userInput сохраним номер ячейки, который ввел пользователь
        int userInput = -1; // по умолчанию присвоим, например, -1
        // будем крутиться в вечном цикле, пока пользователь не введет все так, как положено
        do {
            System.out.print("Выберите номер ячейки (от 1 до " + ROW_SIZE * ROW_SIZE + ", кроме занятых) или 0 для выхода ");
            userInput = scanner.nextInt();
            // считываем перевод строчки, чтобы очистить буффер
            // иначе он из буффера прочитается при следующем вводе символа
            scanner.nextLine();
            // здесь хитрое сравнение
            // если пользователь введет 0, то мы выйдем из цикла и не будем проверять остаток условия
            // если введет меньше 1 или больше 9, то тоже выйдем из цикла
            // и не будем лезть в массив field[userInput - 1]
            // поэтому не выйдем за его пределы
        } while (!(userInput == 0 ||
                (userInput >= 1 && userInput <= ROW_SIZE * ROW_SIZE && field[userInput - 1] == BLANK_SYMBOL)));

        // Выходим, если пользователь ввел 0
        if (userInput == 0) {
            return 0;
        }

        // В цикле спрашиваем до тех пор, пока пользователь не введет какую-то букву
        // Если он просто нажмет Enter попросим ввести еще раз
        // Обратите внимание, что в этом цикле мы используеум конструкцию do-while
        // Так код получается более лаконичным
        String line;
        do {
            System.out.println("Введите символ, который надо поставить в ячейку ");
            line = scanner.nextLine();
        } while (line.isEmpty());

        char symbol = line.charAt(0);
        field[userInput - 1] = symbol;

        // Если бы мы не проверяли на пустой ввод выше в цикле, то здесь могла бы произойти ошибка
        for (int i = 0; i < ROW_SIZE; i++) {
            if(field[i * ROW_SIZE] == symbol && field[i * ROW_SIZE + 1] == symbol && field[i * ROW_SIZE + 2] == symbol){
                System.out.println("Пользователь " + user + " поздравляем! Вы победили!");
                return 0;
            }
        }
        for (int i = 0; i < ROW_SIZE; i++) {
             if(field[i]  == symbol && field[ROW_SIZE + i] == symbol && field[2 * ROW_SIZE + i] == symbol){
                System.out.println("Пользователь " + user + " поздравляем! Вы победили!");
                return 0;
            }
        }
        if(field[0] == symbol && field[4] == symbol && field[8] == symbol){
            System.out.println("Пользователь " + user + " поздравляем! Вы победили!");
            return 0;
        }
        if(field[2] == symbol && field[4] == symbol && field[6] == symbol){
            System.out.println("Пользователь " + user + " поздравляем! Вы победили!");
            return 0;
        }
        return 1;
    }
}

